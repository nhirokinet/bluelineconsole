# Note: modified this file after auto-generating from template.
# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Android.gitlab-ci.yml

# Read more about this script on this blog post https://about.gitlab.com/2018/10/24/setting-up-gitlab-ci-for-android-projects/, by Jason Lenny
# If you are interested in using Android with FastLane for publishing take a look at the Android-Fastlane template.

image: ubuntu:20.04

variables:
  # It's what version of the command line tools we're going to download from the official site.
  # Official Site-> https://developer.android.com/studio/index.html
  # There, look down below at the cli tools only, sdk tools package is of format:
  #        commandlinetools-os_type-ANDROID_SDK_TOOLS_latest.zip
  # when the script was last modified for latest compileSdkVersion, it was which is written down below
  ANDROID_SDK_TOOLS: "8092744"

# Packages installation before running script
before_script:
  - apt --quiet update --yes
  - apt --quiet install --yes wget tar unzip lib32stdc++6 lib32z1 xxd libgl1 openjdk-11-jdk python3 git

  # Setup path as android_home for moving/exporting the downloaded sdk into it
  - export ANDROID_HOME="${PWD}/android-home"
  # Create a new directory at specified location
  - install -d $ANDROID_HOME
  # Here we are installing androidSDK tools from official source,
  # (the key thing here is the url from where you are downloading these sdk tool for command line, so please do note this url pattern there and here as well)
  # after that unzipping those tools and
  # then running a series of SDK manager commands to install necessary android SDK packages that'll allow the app to build
  - wget --output-document=$ANDROID_HOME/cmdline-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-${ANDROID_SDK_TOOLS}_latest.zip
  # move to the archive at ANDROID_HOME
  - pushd $ANDROID_HOME
  - unzip -d cmdline-tools cmdline-tools.zip
  - popd
  - export PATH=$PATH:${ANDROID_HOME}/cmdline-tools/cmdline-tools/bin/:${ANDROID_HOME}/platform-tools/

  # Nothing fancy here, just checking sdkManager version
  - sdkmanager --version

  # use yes to accept all licenses
  - yes | sdkmanager --sdk_root=${ANDROID_HOME} --licenses || true
  - sdkmanager --sdk_root=${ANDROID_HOME} "platforms;android-$(grep 'compileSdk [1-9]' ./app/build.gradle | sed -e 's/^.*compileSdk //')"
  - sdkmanager --sdk_root=${ANDROID_HOME} "platform-tools"
  - export ANDROID_BUILD_TOOLS=$(grep 'buildToolsVersion '\''[1-9]' "./app/build.gradle" | sed -e 's/^.*buildToolsVersion '\''//' -e 's/'\''$//')
  - sdkmanager --sdk_root=${ANDROID_HOME} "build-tools;${ANDROID_BUILD_TOOLS}"
  - export PATH=$PATH:${ANDROID_HOME}/build-tools/${ANDROID_BUILD_TOOLS}/

test:
  interruptible: true
  stage: test
  timeout: 60 minutes
  script:
    - sed -i -e 's/        versionName "\(.*\)"/        versionName "\1-'$(date +%Y.%m%d.%H%M)'-'$(git rev-parse --short HEAD)'"/' app/build.gradle

    - ./gradlew -Pci --console=plain :app:lintDebug -PbuildDir=lint
    - ./gradlew build bundleRelease
    - ./ci/license-checker.py
    - ./ci/android-connectedcheck.sh

    - mv app/build/outputs/apk/release/app-release-unsigned.apk $CI_PROJECT_NAME-$(grep versionName app/build.gradle | sed -e 's/^ *versionName "//' -e 's/"$//').apk

  artifacts:
    paths:
      - $CI_PROJECT_NAME-*.apk
      - app/build/reports/androidTests/connected/
      - app/build/reports/tests/testReleaseUnitTest/
      - app/build/reports/lint-results.html
    reports:
       junit:
         - app/build/test-results/**/TEST-*.xml
         - app/build/outputs/androidTest-results/connected/*xml
       

signedBuildForRelease:
  interruptible: true
  stage: deploy
  when: manual
  timeout: 10 minutes
  script:
    - rm -f ./*.apk
    - ./gradlew build bundleRelease
    - ./ci/license-checker.py
    - xxd -r "$app_sign_key_jks_xxd" > app/build/key.jks
    - apksigner sign --ks app/build/key.jks --ks-key-alias "$app_sign_key_alias" --ks-pass pass:"$app_sign_key_jks_pass" --out $CI_PROJECT_NAME-$(grep versionName app/build.gradle | sed -e 's/^ *versionName "//' -e 's/"$//').apk app/build/outputs/apk/release/app-release-unsigned.apk
    - jarsigner -keystore app/build/key.jks -storepass "$app_sign_key_jks_pass" app/build/outputs/bundle/release/app-release.aab "$app_sign_key_alias"
    - rm app/build/key.jks
    - mv app/build/outputs/bundle/release/app-release.aab $CI_PROJECT_NAME-$(grep versionName app/build.gradle |sed -e 's/^ *versionName "//' -e 's/"$//').aab

  artifacts:
    paths:
      - $CI_PROJECT_NAME-*.apk
      - $CI_PROJECT_NAME-*.aab
      - app/build/outputs/mapping/release/mapping.txt
